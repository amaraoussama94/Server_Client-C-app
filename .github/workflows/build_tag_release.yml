# /**
#  * @file build-release.yml
#  * @brief GitHub Actions workflow for cross-platform build and semantic tagging after pull request merges.
#  *        Builds Windows and Linux binaries, packages artifacts, and auto-increments version tag.
#  *        Triggered on push to main (typically after PR merge).
#  *        Versioning follows X.Y format, starting at 1.0 and rolling over after 0.9.
#  * @author Oussama Amara
#  * @version 1.1
#  * @date 2025-09-07
#  */

name: Cross-Platform Build & Release

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Required for pushing tags and creating releases

jobs:
  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up MSYS2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          make

    - name: Build
      run: |
        make clean
        make all

    - name: Package Windows binaries
      run: |
        mkdir -p dist/windows
        cp build/bin/*.exe dist/windows/

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: dist/windows/

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install build tools
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Build
      run: |
        make clean
        make all

    - name: Package Linux binaries
      run: |
        mkdir -p dist/linux
        cp build/bin/* dist/linux/

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: dist/linux/

  tag-release:
    name: Tag and Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"

    - name: Read and increment version
      id: versioning
      run: |
        VERSION_FILE="VERSION"
        if [ ! -f "$VERSION_FILE" ]; then
          echo "1.0" > "$VERSION_FILE"
        fi

        CURRENT=$(cat "$VERSION_FILE")
        MAJOR=$(echo $CURRENT | cut -d. -f1)
        MINOR=$(echo $CURRENT | cut -d. -f2)

        if [ "$MINOR" -lt 9 ]; then
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="$MAJOR.$NEW_MINOR"
        else
          NEW_MAJOR=$((MAJOR + 1))
          NEW_VERSION="$NEW_MAJOR.0"
        fi

        echo "$NEW_VERSION" > "$VERSION_FILE"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Commit updated version file
      run: |
        git add VERSION
        git commit -m "Bump version to ${{ steps.versioning.outputs.version }}"
        git push

    - name: Create and push tag
      run: |
        TAG="SRV_CLE_GEN_${{ steps.versioning.outputs.version }}"
        git tag -a "$TAG" -m "Auto-generated tag: $TAG"
        git push origin "$TAG"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.versioning.outputs.version }}
        tag_name: SRV_CLE_GEN_${{ steps.versioning.outputs.version }}
        files: |
          dist/windows/*.exe
          dist/linux/*
