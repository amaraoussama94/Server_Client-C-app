# /**
#  * @file build-release.yml
#  * @brief Unified GitHub Actions workflow for cross-platform build, version bump via pull request,
#  *        automated tagging and release, and binary sync to external test repository.
#  *
#  *        - Builds Windows and Linux binaries using Make (output: build/bin/)
#  *        - Packages and uploads artifacts as windows-binaries and linux-binaries
#  *        - Opens a pull request to bump version (X.Y format, starting at 1.0)
#  *        - Creates annotated tag and GitHub release after PR merge
#  *        - Pushes built binaries to `client-server-test-suite/bins/<version>/windows` and `linux`
#  *
#  *        Complies with branch protection rules by avoiding direct pushes to main.
#  *        Designed for modular, contributor-friendly client-server architecture validation.
#  *
#  * @author Oussama Amara
#  * @version 1.7
#  * @date 2025-10-05
#  */

name: Cross-Platform Build, Version Bump & Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üõ† Set up MSYS2 for GCC and Make
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          mingw-w64-x86_64-gcc
          make

    - name: üß± Build Windows binaries
      run: |
        make clean
        make all

    - name: üì¶ Package Windows binaries
      run: |
        mkdir -p dist/windows-binaries
        cp build/bin/*.exe dist/windows-binaries/

    - name: üì§ Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: dist/windows-binaries/

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üõ† Install build tools
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: üß± Build Linux binaries
      run: |
        make clean
        make all

    - name: üì¶ Package Linux binaries
      run: |
        mkdir -p dist/linux-binaries
        cp build/bin/* dist/linux-binaries/

    - name: üì§ Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: dist/linux-binaries/

  tag-and-release:
    name: Version Bump PR + Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest

    steps:
    - name: üßæ Checkout code
      uses: actions/checkout@v3

    - name: üîê Configure Git identity
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: üî¢ Read and increment version from remote tags
      id: versioning
      run: |
        git fetch --tags
        LATEST_TAG=$(git tag | grep '^SRV_CLE_GEN_' | sort -V | tail -n1)

        if [ -z "$LATEST_TAG" ]; then
          NEW_VERSION="1.0"
        else
          BASE_VERSION=${LATEST_TAG#SRV_CLE_GEN_}
          MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
          MINOR=$(echo $BASE_VERSION | cut -d. -f2)

          if [ "$MINOR" -lt 9 ]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR"
          else
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0"
          fi
        fi

        echo "$NEW_VERSION" > VERSION
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: üîÅ Create Pull Request for version bump
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.PAT_TOKEN }}
        branch: version-bump-${{ steps.versioning.outputs.version }}
        title: "chore: bump version to ${{ steps.versioning.outputs.version }}"
        body: |
          # üìù Task Title
          Automated version bump and release preparation

          # üìå Summary
          This PR updates the `VERSION` file to `${{ steps.versioning.outputs.version }}`.
          Triggered by successful builds on Windows and Linux.

          # üìÇ Related File Changes
          - VERSION

          # üß™ Testing
          - [x] CI builds passed
          - [x] Artifacts uploaded
          - [ ] Manual testing not applicable

          # üß† Notes for Reviewers
          Auto-generated by GitHub Actions. No functional changes.

          # ‚úÖ Checklist
          - [x] Code compiles
          - [x] No debug prints
          - [x] VERSION updated

        labels: version-bump, automated
        assignees: amaraoussama94 

    - name: üßæ Checkout again after merge
      if: github.ref == 'refs/heads/main'
      uses: actions/checkout@v3

    - name: üî¢ Read merged version
      if: github.ref == 'refs/heads/main'
      id: merged-version
      run: |
        VERSION=$(cat VERSION)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: üè∑ Create and push tag
      if: github.ref == 'refs/heads/main'
      run: |
        TAG="SRV_CLE_GEN_${{ steps.merged-version.outputs.version }}"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists. Skipping."
        else
          git tag -a "$TAG" -m "Auto-generated tag: $TAG"
          git push origin "$TAG"
        fi

    - name: üì• Download all artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: üöÄ Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.merged-version.outputs.version }}
        tag_name: SRV_CLE_GEN_${{ steps.merged-version.outputs.version }}
        files: |
          dist/windows-binaries/*.exe
          dist/linux-binaries/*

    - name: üîÑ Sync binaries to test repo
      if: github.ref == 'refs/heads/main'
      run: |
        TEST_REPO="https://oussama:${{ secrets.PAT_TOKEN }}@github.com/amaraoussama94/client-server-test-suite.git"
        VERSION=${{ steps.merged-version.outputs.version }}

        git clone "$TEST_REPO" test-repo
        mkdir -p test-repo/bins/$VERSION/windows
        mkdir -p test-repo/bins/$VERSION/linux

        if compgen -G "dist/windows-binaries/*.exe" > /dev/null; then
          cp dist/windows-binaries/*.exe test-repo/bins/$VERSION/windows/
        else
          echo "‚ö†Ô∏è No Windows binaries found. Skipping Windows sync."
        fi

        if compgen -G "dist/linux-binaries/*" > /dev/null; then
          cp dist/linux-binaries/* test-repo/bins/$VERSION/linux/
        else
          echo "‚ö†Ô∏è No Linux binaries found. Skipping Linux sync."
        fi

        cd test-repo
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "test: add binaries for version $VERSION"
        git push origin main
